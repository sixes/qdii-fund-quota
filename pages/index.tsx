import { useEffect, useState, useRef } from 'react';
import Head from 'next/head';
import { useForm } from '@formspree/react';
import DatePicker from 'react-datepicker';
import "react-datepicker/dist/react-datepicker.css";
import React from 'react';
import { Switch } from '@headlessui/react';
import Autocomplete from '@mui/material/Autocomplete';
import TextField from '@mui/material/TextField';
import Pagination from '@mui/material/Pagination';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper from '@mui/material/Paper';
import TableSortLabel from '@mui/material/TableSortLabel';
import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import AccordionDetails from '@mui/material/AccordionDetails';
import Typography from '@mui/material/Typography';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import Script from 'next/script';
import { Analytics } from '@vercel/analytics/react';
import Link from 'next/link';
import Navigation from '../components/Navigation';
import { useRouter } from 'next/router';

export default function Home() {
  const router = useRouter();
  const [filters, setFilters] = useState({ fund_company: '', fund_name: 'Á∫≥ÊñØËææÂÖã100ETF', fund_code: '', country: '' });
  const [data, setData] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [sortKey, setSortKey] = useState<string>('quota');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');
  const [fundSortKey, setFundSortKey] = useState<string>('quota');
  const [fundSortDirection, setFundSortDirection] = useState<'asc' | 'desc'>('desc');
  const [stockSortKey, setStockSortKey] = useState<string>('changeFromAthPercent');
  const [stockSortDirection, setStockSortDirection] = useState<'asc' | 'desc'>('asc');
  const [fundCompanies, setFundCompanies] = useState<string[]>([]);
  const [state, handleSubmit] = useForm("xyzdlpln");
  const [message, setMessage] = useState('');
  const [activeTab, setActiveTab] = useState<'index' | 'funds' | 'stocks'>('funds');
  
  // Set default language to EN on mount
  useEffect(() => {
    // Check if language parameter is in URL
    const langFromUrl = router.query.lang as string;
    if (langFromUrl === 'zh') {
      setLanguage('zh');
      setActiveTab('funds'); // Default to funds for Chinese version
    } else {
      setLanguage('en');
      setActiveTab('index');
    }
    setActiveIndex('nasdaq100');
  }, [router.query.lang]);
  const [stockData, setStockData] = useState<any[]>([]);
  const [stockLoading, setStockLoading] = useState(false);
  const [stockMarket, setStockMarket] = useState<'US' | 'HK'>('US');
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [isInitialized, setIsInitialized] = useState(false);
  const [hasLoadedInitialData, setHasLoadedInitialData] = useState(false);
  const [activeIndex, setActiveIndex] = useState<'nasdaq100' | 'sp500' | 'dow'>('nasdaq100');
  const [indexData, setIndexData] = useState<any[]>([]);
  const [indexLoading, setIndexLoading] = useState(false);
  const [indexSortKey, setIndexSortKey] = useState<string>('no');
  const [indexSortDirection, setIndexSortDirection] = useState<'asc' | 'desc'>('asc');
  const [language, setLanguage] = useState<'en' | 'zh'>('en');
  const [openMenu, setOpenMenu] = useState<null | 'nasdaq100' | 'sp500' | 'dow'>(null);

  const companyList = ["ÊòìÊñπËææ", "ÈïøÂüé", "ÊôØÈ°∫ÈïøÂüé", "ÂçéÊ≥∞ËØÅÂà∏", "ÂõΩÊµ∑ÂØåÂÖ∞ÂÖãÊûó", "ÈπèÂçé", "‰∏≠Èì∂", "ÂçöÊó∂", "ÂòâÂÆû", "ÂçéÂ§è", "Ê±áÊ∑ªÂØå", "Â§©Âºò", "Â∑•Èì∂Áëû‰ø°", "Êë©Ê†π", "Â§ßÊàê", "ÂõΩÊ≥∞", "Âª∫‰ø°", "ÂÆùÁõà", "ÂçéÊ≥∞ÊüèÁëû", "ÂçóÊñπ", "‰∏áÂÆ∂", "ÂπøÂèë", "ÂçéÂÆâ", "ÂçéÂÆù", "ÊãõÂïÜ", "Êµ∑ÂØåÈÄö"].sort((a, b) => a.charAt(0).localeCompare(b.charAt(0), 'zh'));

  // Language support
  const t = {
    en: {
      title: "US Index Constituents",
      description: "View constituents of major US stock indices",
      indexConstituents: "Index Constituents",
      qdii: "QDII Funds",
      mega7: "Mega 7+ Stocks",
      loading: "Loading...",
      noData: "No data available",
      no: "No.",
      symbol: "Symbol",
      companyName: "Company Name",
      weight: "Weight %",
      price: "Price",
      change: "Change %",
      marketCap: "Market Cap",
      athPrice: "ATH Price",
      peRatio: "P/E Ratio",
      epsTtm: "EPS TTM",
      psRatio: "P/S Ratio",
      pbRatio: "P/B Ratio",
      forwardPe: "Forward P/E",
      athDate: "ATH Date"
    },
    zh: {
      title: "QDIIÂü∫ÈáëÁî≥Ë¥≠È¢ùÂ∫¶Êü•ËØ¢",
      description: "Âø´ÈÄüÊü•ËØ¢ÂêÑQDIIÂü∫ÈáëÈ¢ùÂ∫¶ÔºåÊîØÊåÅÂ§öÊù°‰ª∂Á≠õÈÄâ",
      indexConstituents: "ÊåáÊï∞ÊàêÂàÜËÇ°",
      qdii: "Âü∫ÈáëÈ¢ùÂ∫¶",
      mega7: "Mega 7+ ËÇ°Á•®",
      loading: "Âä†ËΩΩ‰∏≠...",
      noData: "ÊöÇÊó†Êï∞ÊçÆ",
      no: "No.",
      symbol: "Symbol",
      companyName: "Company Name",
      weight: "Weight %",
      price: "Price",
      change: "Change %",
      marketCap: "Market Cap",
      athPrice: "ATH Price",
      peRatio: "P/E Ratio",
      epsTtm: "EPS TTM",
      psRatio: "P/S Ratio",
      pbRatio: "P/B Ratio",
      forwardPe: "Forward P/E",
      athDate: "ATH Date"
    }
  };

  useEffect(() => {
    console.log('üöÄ Initial setup useEffect triggered');
    setFundCompanies(companyList);
    setIsInitialized(true);
    console.log('‚úÖ Initial setup completed, isInitialized set to true');
  }, []);

  const fetchData = async (customFilters = filters) => {
    console.log('üìä fetchData called with:', { activeTab, customFilters, isInitialized });
    if (activeTab !== 'funds') {
      console.log('‚ùå fetchData skipped: not on funds tab');
      return;
    }
    console.log('üîÑ Starting fetchData request...');
    setLoading(true);
    const params = new URLSearchParams();
    Object.entries(customFilters).forEach(([k, v]) => { if (v) params.append(k, v); });
    const res = await fetch('/api/quotas?' + params.toString());
    const fetchedData = await res.json();
    setData(sortData(fetchedData, fundSortKey, fundSortDirection));
    setLoading(false);
    console.log('‚úÖ fetchData completed');
  };

  const sortData = (data: any[], key: string, direction: 'asc' | 'desc') => {
    if (!key) return data;
    return [...data].sort((a, b) => {
      let aVal = a[key];
      let bVal = b[key];
      if (activeTab === 'funds' && key === 'quota') {
        const aQuota = a.currency === 'USD' ? Number(a.quota) * 7 : Number(a.quota);
        const bQuota = b.currency === 'USD' ? Number(b.quota) * 7 : Number(b.quota);
        return direction === 'asc' ? aQuota - bQuota : bQuota - aQuota;
      }
      if (typeof aVal === 'string' && !isNaN(Number(aVal))) {
        aVal = Number(aVal);
        bVal = Number(bVal);
      }
      if (typeof aVal === 'string' && typeof bVal === 'string') {
        return direction === 'asc' ? aVal.localeCompare(bVal) : bVal.localeCompare(aVal);
      }
      return direction === 'asc' ? aVal - bVal : bVal - aVal;
    });
  };

  const handleSort = (key: string) => {
    const newDirection = sortKey === key && sortDirection === 'asc' ? 'desc' : 'asc';
    if (activeTab === 'stocks') {
      setStockSortKey(key);
      setStockSortDirection(newDirection);
      setStockData(sortData(stockData, key, newDirection));
    } else if (activeTab === 'index') {
      setIndexSortKey(key);
      setIndexSortDirection(newDirection);
      setIndexData(sortData(indexData, key, newDirection));
    } else {
      setFundSortKey(key);
      setFundSortDirection(newDirection);
      setData(sortData(data, key, newDirection));
    }
    setSortKey(key);
    setSortDirection(newDirection);
  };

  const handleSearch = () => fetchData(filters);

  const resetFilters = () => {
    const clearedFilters = { fund_company: '', fund_name: '', fund_code: '', country: '' };
    setFilters(clearedFilters);
    fetchData(clearedFilters);
  };

  const openPdf = (pdfId: number) => {
    const url = `http://eid.csrc.gov.cn/fund/disclose/instance_html_view.do?instanceid=${pdfId}`;
    window.open(url, '_blank', 'noopener,noreferrer');
  };

  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    const formData = new FormData(e.currentTarget);
    const email = formData.get('email') as string;
    if (!email.trim()) {
      const confirmed = window.confirm('ÊÇ®Êú™Êèê‰æõÈÇÆÁÆ±ÔºåÊàë‰ª¨Êó†Ê≥ïÂõûÂ§çÊÇ®ÁöÑÁïôË®Ä„ÄÇÁ°ÆÂÆöË¶ÅÁªßÁª≠Êèê‰∫§ÂêóÔºü');
      if (!confirmed) {
        e.preventDefault();
        return;
      }
    }
    handleSubmit(e);
  };

  const fetchIndexData = async (index = activeIndex) => {
    console.log('üìä fetchIndexData called with:', { activeTab, index, isInitialized });
    if (activeTab !== 'index') {
      console.log('‚ùå fetchIndexData skipped: not on index tab');
      return;
    }
    console.log('üîÑ Starting fetchIndexData request...');
    setIndexLoading(true);
    
    const res = await fetch(`/api/index-constituents?index=${index}`);
    const fetchedIndexData = await res.json();
    console.log('üìä Fetched index data:', fetchedIndexData);
    
    let sortedIndexData: any[] = [];
    if (Array.isArray(fetchedIndexData)) {
      sortedIndexData = sortData(fetchedIndexData, indexSortKey, indexSortDirection);
    } else {
      sortedIndexData = [];
    }
    setIndexData(sortedIndexData);
    setIndexLoading(false);
    console.log('‚úÖ fetchIndexData completed');
  };

  const fetchStockData = async () => {
    console.log('üìà fetchStockData called with:', { activeTab, selectedDate, stockMarket, isInitialized });
    if (activeTab !== 'stocks') {
      console.log('‚ùå fetchStockData skipped: not on stocks tab');
      return;
    }
    console.log('üîÑ Starting fetchStockData request...');
    setStockLoading(true); // Re-added to indicate loading state
    console.log('üïí Original selectedDate:', selectedDate);

    // Simplify date formatting using toLocaleDateString
    const formattedDate = selectedDate.toLocaleDateString('en-CA'); // Format as YYYY-MM-DD

    console.log('üìÖ Formatted date for API:', formattedDate);
    const res = await fetch(`/api/stocks?date=${formattedDate}`);
    const fetchedStockData = await res.json();
    console.log('üìä Fetched stock data:', fetchedStockData);
    let sortedStockData: any[] = [];
    if (Array.isArray(fetchedStockData)) {
      sortedStockData = sortData(fetchedStockData, stockSortKey, stockSortDirection);
    } else {
      sortedStockData = [];
    }
    setStockData(sortedStockData);
    setStockLoading(false);
    console.log('‚úÖ fetchStockData completed');
  };

  const minDate = new Date('2025-09-12');
  const maxDate = new Date();

  const filteredStockData = stockData.filter(stock => stockMarket === 'US' ? stock.market === 'US' : stock.market === 'HK');

  const datePickerRef = useRef<DatePicker>(null);

  const DatePickerCustomInput = React.forwardRef<HTMLInputElement, any>(({ value, onClick }, ref) => (
    <div className="flex items-center justify-end w-full bg-transparent cursor-pointer" onClick={onClick} ref={ref}>
      <span className="mr-1">üìÖ</span>
      <span className="text-right w-full">{value}</span>
    </div>
  ));

  const [fundsPage, setFundsPage] = useState(1);
  const [stocksPage, setStocksPage] = useState(1);
  const [indexPage, setIndexPage] = useState(1);
  const ITEMS_PER_PAGE = 20;

  useEffect(() => { setFundsPage(1); }, [filters, activeTab]);
  useEffect(() => { setStocksPage(1); }, [selectedDate, stockMarket, activeTab]);
  useEffect(() => { setIndexPage(1); }, [activeIndex, activeTab, indexData.length]);

  const pagedFunds = data;
  const pagedStocks = filteredStockData.slice((stocksPage-1)*ITEMS_PER_PAGE, stocksPage*ITEMS_PER_PAGE);
  const pagedIndexData = indexData.slice((indexPage-1)*ITEMS_PER_PAGE, indexPage*ITEMS_PER_PAGE);
  const fundsTotalPages = Math.ceil(data.length / ITEMS_PER_PAGE);
  const stocksTotalPages = Math.ceil(filteredStockData.length / ITEMS_PER_PAGE);
  const indexTotalPages = Math.ceil(indexData.length / ITEMS_PER_PAGE);

  function getPageNumbers(current: number, total: number) {
    if (total <= 4) return Array.from({length: total}, (_,i) => i+1);
    if (current <= 2) return [1,2,3,4];
    if (current >= total-1) return [total-3, total-2, total-1, total];
    return [current-1, current, current+1, current+2];
  }

  // Initial data load and tab switching
  useEffect(() => {
    console.log('üéØ Tab switching useEffect triggered:', { activeTab, isInitialized, hasLoadedInitialData });
    if (!isInitialized) {
      console.log('‚è≥ Skipping: not initialized yet');
      return;
    }
    
    if (activeTab === 'index') {
      console.log('üìä Switching to index tab');
      setSortKey(indexSortKey);
      setSortDirection(indexSortDirection);
      fetchIndexData(activeIndex);
      setHasLoadedInitialData(true);
    } else if (activeTab === 'funds') {
      console.log('üí∞ Switching to funds tab');
      setSortKey(fundSortKey);
      setSortDirection(fundSortDirection);
      fetchData(filters);
      setHasLoadedInitialData(true);
    } else if (activeTab === 'stocks') {
      console.log('üìà Switching to stocks tab');
      setSortKey(stockSortKey);
      setSortDirection(stockSortDirection);
      fetchStockData();
      setHasLoadedInitialData(true);
    }
  }, [activeTab, isInitialized]);

  // Filter changes for funds only (skip if not initialized, not on funds tab, or initial load)
  useEffect(() => {
    console.log('üîç Filters useEffect triggered:', { filters, isInitialized, activeTab, hasLoadedInitialData });
    if (!isInitialized || activeTab !== 'funds' || !hasLoadedInitialData) {
      console.log('‚è≥ Skipping filters useEffect: not ready, not on funds tab, or initial load');
      return;
    }
    console.log('üîç Fetching data due to filter change');
    fetchData(filters);
  }, [filters, isInitialized]);

  // Stock parameters changes (skip if not initialized, not on stocks tab, or initial load)
  useEffect(() => {
    console.log('üìä Stock params useEffect triggered:', { selectedDate, stockMarket, isInitialized, activeTab, hasLoadedInitialData });
    if (!isInitialized || activeTab !== 'stocks' || !hasLoadedInitialData) {
      console.log('‚è≥ Skipping stock params useEffect: not ready, not on stocks tab, or initial load');
      return;
    }
    console.log('üìä Fetching stock data due to parameter change');
    fetchStockData();
  }, [selectedDate, stockMarket, isInitialized]);

  const handleDateChange = (date: Date | null) => {
    if (date) {
      setSelectedDate(date);
    }
  };

  return (
    <>
      <Head>
        <title>{language === 'en' ? t.en.title : t.zh.title}</title>
        <meta name="description" content={language === 'en' ? t.en.description : t.zh.description} />
        <meta name="keywords" content={language === 'en' ? "US stock indices, Nasdaq 100, S&P 500, Dow Jones, stock constituents" : "QDIIÂü∫Èáë, Áî≥Ë¥≠È¢ùÂ∫¶Êü•ËØ¢, Á∫≥Êåá, Á∫≥ÊñØËææÂÖãÊåáÊï∞ÔºåÊ†áÊôÆ, Á∫≥ÊåáÈ¢ùÂ∫¶, Ê†áÊôÆÈ¢ùÂ∫¶, ÁâπÊñØÊãâ, METAÔºå ËãπÊûúÔºå Ë∞∑Ê≠å, MEGAÔºå ‰∫öÈ©¨ÈÄäÔºå Ëã±‰ºüËææÔºå ËÖæËÆØ"} />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="robots" content="index, follow" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Script src="https://www.googletagmanager.com/gtag/js?id=G-KYCK18CLKM" strategy="afterInteractive" />
      <Script id="google-analytics" strategy="afterInteractive">{`
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);} 
          gtag('js', new Date());
          gtag('config', 'G-KYCK18CLKM');
        `}
      </Script>

      {language === 'en' ? (
        <div className="min-h-screen bg-gray-100">
          <Navigation language={language} onLanguageChange={setLanguage} />
          <main className="py-10">
            <div className="max-w-7xl mx-auto sm:px-6 lg:px-8">
              <div className="mb-6 text-center">
                <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-2">Nasdaq 100 Index Constituents</h1>
                <p className="text-gray-600 text-lg">View all Nasdaq 100 stocks with weights, last closing prices, ATH data, and key financial ratios</p>
              </div>
              <TableContainer component={Paper} className="rounded-xl shadow-lg bg-white overflow-x-auto">
                <Table size="small" sx={{ minWidth: { xs: 320, sm: 650 } }}>
                  <TableHead>
                    <TableRow className="bg-gray-50 text-gray-600" sx={{ height: { xs: 28, sm: 32 } }}>
                      <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 30, sm: 40 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                        <TableSortLabel active={sortKey === 'no'} direction={sortKey === 'no' ? sortDirection : 'asc'} onClick={() => handleSort('no')}>{t.en.no}</TableSortLabel>
                      </TableCell>
                      <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 50, sm: 70 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                        <TableSortLabel active={sortKey === 'symbol'} direction={sortKey === 'symbol' ? sortDirection : 'asc'} onClick={() => handleSort('symbol')}>{t.en.symbol}</TableSortLabel>
                      </TableCell>
                      <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 80, sm: 120 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                        <TableSortLabel active={sortKey === 'name'} direction={sortKey === 'name' ? sortDirection : 'asc'} onClick={() => handleSort('name')}>{t.en.companyName}</TableSortLabel>
                      </TableCell>
                      <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 40, sm: 60 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                        <TableSortLabel active={sortKey === 'ath_price'} direction={sortKey === 'ath_price' ? sortDirection : 'desc'} onClick={() => handleSort('ath_price')}>{t.en.athPrice}</TableSortLabel>
                      </TableCell>
                      <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 40, sm: 60 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                        <TableSortLabel active={sortKey === 'ath_date'} direction={sortKey === 'ath_date' ? sortDirection : 'desc'} onClick={() => handleSort('ath_date')}>{t.en.athDate}</TableSortLabel>
                      </TableCell>
                      <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 40, sm: 60 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                        <TableSortLabel active={sortKey === 'price'} direction={sortKey === 'price' ? sortDirection : 'desc'} onClick={() => handleSort('price')}>{t.en.price}</TableSortLabel>
                      </TableCell>
                      <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 40, sm: 60 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                        <TableSortLabel active={sortKey === 'change'} direction={sortKey === 'change' ? sortDirection : 'desc'} onClick={() => handleSort('change')}>{t.en.change}</TableSortLabel>
                      </TableCell>
                      <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 40, sm: 60 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                        <TableSortLabel active={sortKey === 'weight'} direction={sortKey === 'weight' ? sortDirection : 'desc'} onClick={() => handleSort('weight')}>{t.en.weight}</TableSortLabel>
                      </TableCell>
                      <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 50, sm: 70 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                        <TableSortLabel active={sortKey === 'marketCap'} direction={sortKey === 'marketCap' ? sortDirection : 'desc'} onClick={() => handleSort('marketCap')}>{t.en.marketCap}</TableSortLabel>
                      </TableCell>
                      <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 40, sm: 60 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                        <TableSortLabel active={sortKey === 'pe_ratio'} direction={sortKey === 'pe_ratio' ? sortDirection : 'desc'} onClick={() => handleSort('pe_ratio')}>{t.en.peRatio}</TableSortLabel>
                      </TableCell>
                      <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 40, sm: 60 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                        <TableSortLabel active={sortKey === 'forward_pe'} direction={sortKey === 'forward_pe' ? sortDirection : 'desc'} onClick={() => handleSort('forward_pe')}>{t.en.forwardPe}</TableSortLabel>
                      </TableCell>
                      <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 40, sm: 60 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                        <TableSortLabel active={sortKey === 'ps_ratio'} direction={sortKey === 'ps_ratio' ? sortDirection : 'desc'} onClick={() => handleSort('ps_ratio')}>{t.en.psRatio}</TableSortLabel>
                      </TableCell>
                      <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 40, sm: 60 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                        <TableSortLabel active={sortKey === 'pb_ratio'} direction={sortKey === 'pb_ratio' ? sortDirection : 'desc'} onClick={() => handleSort('pb_ratio')}>{t.en.pbRatio}</TableSortLabel>
                      </TableCell>
                      <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 40, sm: 60 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                        <TableSortLabel active={sortKey === 'eps_ttm'} direction={sortKey === 'eps_ttm' ? sortDirection : 'desc'} onClick={() => handleSort('eps_ttm')}>{t.en.epsTtm}</TableSortLabel>
                      </TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {indexLoading ? (
                      <TableRow>
                        <TableCell colSpan={13} align="center" className="py-8 text-gray-500">{t.en.loading}</TableCell>
                      </TableRow>
                    ) : indexData.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={13} align="center" className="py-8 text-gray-500">{t.en.noData}</TableCell>
                      </TableRow>
                    ) : (
                      pagedIndexData.map((row, i) => (
                        <TableRow key={i} className="hover:bg-gray-50 transition" sx={{ height: { xs: 20, sm: 32 } }}>
                          <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.no}</TableCell>
                          <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.symbol}</TableCell>
                          <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.name}</TableCell>
                          <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.ath_price ? `$${row.ath_price.toFixed(2)}` : '-'}</TableCell>
                          <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.ath_date || '-'}</TableCell>
                          <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.price ? `$${row.price.toFixed(2)}` : '-'}</TableCell>
                          <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 }, color: row.change > 0 ? 'green' : row.change < 0 ? 'red' : 'inherit' }}>{row.change ? `${row.change > 0 ? '+' : ''}${row.change.toFixed(2)}%` : '-'}</TableCell>
                          <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.weight ? `${row.weight.toFixed(2)}%` : '-'}</TableCell>
                          <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.marketCap || '-'}</TableCell>
                          <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.pe_ratio ? row.pe_ratio.toFixed(2) : '-'}</TableCell>
                          <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.forward_pe ? row.forward_pe.toFixed(2) : '-'}</TableCell>
                          <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.ps_ratio ? row.ps_ratio.toFixed(2) : '-'}</TableCell>
                          <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.pb_ratio ? row.pb_ratio.toFixed(2) : '-'}</TableCell>
                          <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.eps_ttm ? row.eps_ttm.toFixed(2) : '-'}</TableCell>
                        </TableRow>
                      ))
                    )}
                  </TableBody>
                </Table>
                {indexData.length > 0 && (
                  <div className="relative flex flex-row flex-nowrap items-center w-full py-4 px-2 gap-2">
                    <div className="flex-1 order-2 sm:order-1" />
                    <div className="absolute left-1/2 -translate-x-1/2 flex justify-center items-center gap-2 flex-none mx-auto order-1 sm:order-2">
                      {indexData.length > ITEMS_PER_PAGE && (
                        <Pagination count={indexTotalPages} page={indexPage} onChange={(_, value) => setIndexPage(value)} color="primary" shape="rounded" siblingCount={0} boundaryCount={1} size="small" />
                      )}
                    </div>
                    <div className="flex-1 flex justify-end order-3">
                      <span className="text-gray-500 text-xs sm:text-sm md:text-base whitespace-nowrap">Showing {(indexPage-1)*ITEMS_PER_PAGE+1} to {Math.min(indexPage*ITEMS_PER_PAGE, indexData.length)} of {indexData.length.toLocaleString()}</span>
                    </div>
                  </div>
                )}
              </TableContainer>
            </div>
          </main>
        </div>
      ) : (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-0">
          <Navigation 
            language={language} 
            onLanguageChange={setLanguage} 
            activeTab={activeTab}
            onTabChange={setActiveTab}
          />
          <div className="max-w-5xl mx-auto px-2 py-8">
            <div className="mb-8 text-center">
              <h1 className="text-3xl md:text-4xl font-extrabold text-indigo-700 mb-2 tracking-tight">{t.zh.title}</h1>
              <p className="text-gray-600 text-lg">{t.zh.description}</p>
            </div>

            {activeTab === 'funds' && (
              <>
                <div className="bg-white/80 backdrop-blur rounded-xl shadow-lg p-4 sm:p-6 mb-8 flex flex-col gap-4 items-stretch">
                  <div className="flex flex-col sm:flex-row gap-4">
                    <div className="flex-1">
                      <Autocomplete options={['Ê†áÊôÆ', 'Ê†áÊôÆ500ETF', 'ÈÅìÁêºÊñØ', 'Á≤æÈÄâ', 'ÈªÑÈáë', 'ÊÅíÁîüÁßëÊäÄ', 'ÊÅíÁîü‰∫íËÅîÁΩë', 'Êó•Áªè', 'Á∫≥ÊñØËææÂÖã100ETF', 'ÁîüÁâ©ÁßëÊäÄ', 'Áü≥Ê≤π', 'ÂÄ∫Âà∏']} value={filters.fund_name} onChange={(_, value) => { const newFilters = { ...filters, fund_name: value || '' }; setFilters(newFilters); }} onInputChange={(_, value) => { const newFilters = { ...filters, fund_name: value || '' }; setFilters(newFilters); }} freeSolo renderInput={(params) => <TextField {...params} label="Âü∫ÈáëÂêçÁß∞" variant="outlined" size="small" className="text-xs sm:text-sm" />} clearOnEscape />
                    </div>
                    <div className="flex-1">
                      <Autocomplete options={['', ...fundCompanies]} value={filters.fund_company} onChange={(_, value) => { const newFilters = { ...filters, fund_company: value || '' }; setFilters(newFilters); fetchData(newFilters); }} renderInput={(params) => <TextField {...params} label="Âü∫ÈáëÂÖ¨Âè∏" variant="outlined" size="small" className="text-xs sm:text-sm" />} clearOnEscape />
                    </div>
                  </div>
                  <div className="flex gap-4">
                    <div className="flex-1">
                      <Autocomplete options={['', 'Ê≥ïÂõΩ', 'ÁæéÂõΩ', 'Ê¨ßÊ¥≤', 'Êó•Êú¨', 'Ë∂äÂçó', 'Âç∞Â∫¶', '‰∫öÊ¥≤', '‰∏≠ÂõΩ']} value={filters.country} onChange={(_, value) => { const newFilters = { ...filters, country: value || '' }; setFilters(newFilters); fetchData(newFilters); }} renderInput={(params) => <TextField {...params} label="ÊäïËµÑÂú∞Âå∫" variant="outlined" size="small" className="text-xs sm:text-sm" />} clearOnEscape />
                    </div>
                    <div className="flex-1">
                      <TextField label="Âü∫Èáë‰ª£Á†Å" variant="outlined" size="small" className="text-xs sm:text-sm" value={filters.fund_code} onChange={e => setFilters(f => ({ ...f, fund_code: e.target.value }))} InputProps={{ startAdornment: <span style={{ color: '#9ca3af', marginRight: 4 }}>#</span> }} fullWidth />
                    </div>
                  </div>
                  <div className="flex gap-2 sm:gap-4">
                    <button className="flex-1 bg-gray-600 hover:bg-gray-700 text-white px-2 py-2 rounded-md font-medium shadow transition text-xs sm:text-sm" onClick={resetFilters}>ÈáçÁΩÆ</button>
                    <button className="flex-1 bg-indigo-600 hover:bg-indigo-700 text-white px-2 py-2 rounded-md font-medium shadow transition text-xs sm:text-sm" onClick={handleSearch} disabled={loading}>{loading ? 'Êü•ËØ¢‰∏≠...' : 'Êü•ËØ¢'}</button>
                  </div>
                </div>
                <TableContainer component={Paper} className="rounded-xl shadow-lg bg-white/90 overflow-x-auto">
                  <Table size="small" sx={{ minWidth: { xs: 320, sm: 650 } }}>
                    <TableHead>
                      <TableRow className="bg-indigo-100 text-indigo-800" sx={{ height: { xs: 28, sm: 32 } }}>
                        <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 80, sm: 120 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                          <TableSortLabel active={sortKey === 'fund_name'} direction={sortKey === 'fund_name' ? sortDirection : 'asc'} onClick={() => handleSort('fund_name')}>Âü∫ÈáëÂêçÁß∞</TableSortLabel>
                        </TableCell>
                        <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 60, sm: 85 }, fontSize: { xs: '0.6rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                          <TableSortLabel active={sortKey === 'fund_code'} direction={sortKey === 'fund_code' ? sortDirection : 'asc'} onClick={() => handleSort('fund_code')}>‰ª£Á†Å</TableSortLabel>
                        </TableCell>
                        <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 50, sm: 70 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                          <TableSortLabel active={sortKey === 'quota'} direction={sortKey === 'quota' ? sortDirection : 'desc'} onClick={() => handleSort('quota')}>È¢ùÂ∫¶</TableSortLabel>
                        </TableCell>
                        <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 35, sm: 50 }, fontSize: { xs: '0.6rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                          <TableSortLabel active={sortKey === 'share_class'} direction={sortKey === 'share_class' ? sortDirection : 'asc'} onClick={() => handleSort('share_class')}>Á±ªÂà´</TableSortLabel>
                        </TableCell>
                        <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 40, sm: 60 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                          <TableSortLabel active={sortKey === 'currency'} direction={sortKey === 'currency' ? sortDirection : 'asc'} onClick={() => handleSort('currency')}>Â∏ÅÁßç</TableSortLabel>
                        </TableCell>
                        <TableCell sx={{ minWidth: { xs: 30, sm: 60 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>ÂÖ¨Âëä</TableCell>
                        <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 40, sm: 60 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                          <TableSortLabel active={sortKey === 'fund_company'} direction={sortKey === 'fund_company' ? sortDirection : 'asc'} onClick={() => handleSort('fund_company')}>ÂÖ¨Âè∏</TableSortLabel>
                        </TableCell>
                        <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 35, sm: 55 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                          <TableSortLabel active={sortKey === 'otc'} direction={sortKey === 'otc' ? sortDirection : 'asc'} onClick={() => handleSort('otc')}>OTC</TableSortLabel>
                        </TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {loading ? (
                        <TableRow><TableCell colSpan={8} align="center" className="py-8 text-indigo-400">Âä†ËΩΩ‰∏≠...</TableCell></TableRow>
                      ) : data.length === 0 ? (
                        <TableRow><TableCell colSpan={8} align="center" className="py-8 text-gray-400">ÊöÇÊó†Êï∞ÊçÆ</TableCell></TableRow>
                      ) : (
                        data.slice((fundsPage-1)*ITEMS_PER_PAGE, fundsPage*ITEMS_PER_PAGE).map((row, i) => (
                          <TableRow key={i} className="hover:bg-indigo-50 transition" sx={{ height: { xs: 20, sm: 32 } }}>
                            <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.fund_name}</TableCell>
                            <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.fund_code}</TableCell>
                            <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.quota.toLocaleString()}</TableCell>
                            <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.share_class}</TableCell>
                            <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.currency}</TableCell>
                            <TableCell sx={{ py: 0, px: { xs: 0.5, sm: 1 } }}><button className="text-blue-600 hover:underline text-sm sm:text-base" onClick={() => openPdf(row.pdf_id)}>üìÑ</button></TableCell>
                            <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.fund_company}</TableCell>
                            <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{row.otc}</TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                  {data.length > 0 && (
                    <div className="relative flex flex-row flex-nowrap items-center w-full py-4 px-2 gap-2">
                      <div className="flex-1 order-2 sm:order-1" />
                      <div className="absolute left-1/2 -translate-x-1/2 flex justify-center items-center gap-2 flex-none mx-auto order-1 sm:order-2">
                        {data.length > ITEMS_PER_PAGE && (
                          <Pagination count={fundsTotalPages} page={fundsPage} onChange={(_, value) => setFundsPage(value)} color="primary" shape="rounded" siblingCount={0} boundaryCount={1} size="small" />
                        )}
                      </div>
                      <div className="flex-1 flex justify-end order-3">
                        <span className="text-gray-500 text-xs sm:text-sm md:text-base whitespace-nowrap">ÊòæÁ§∫ {(fundsPage-1)*ITEMS_PER_PAGE+1} Âà∞ {Math.min(fundsPage*ITEMS_PER_PAGE, data.length)} ÔºåÂÖ± {data.length.toLocaleString()} Êù°</span>
                      </div>
                    </div>
                  )}
                </TableContainer>
              </>
            )}

            {activeTab === 'stocks' && (
              <>
                <div className="mb-2 flex flex-col sm:flex-row items-center justify-between gap-2">
                  <div className="w-full sm:w-auto" />
                  <div className="flex items-center justify-end w-full sm:w-auto gap-2">
                    <span className={`font-semibold text-sm ${stockMarket === 'US' ? 'text-indigo-700' : 'text-gray-500'}`}>ÁæéËÇ°</span>
                    <Switch
                      checked={stockMarket === 'HK'}
                      onChange={checked => setStockMarket(checked ? 'HK' : 'US')}
                      className={`${stockMarket === 'HK' ? 'bg-indigo-600' : 'bg-gray-200'} relative inline-flex h-6 w-11 items-center rounded-full transition-colors`}
                    >
                      <span className={`inline-block h-5 w-5 transform rounded-full bg-white shadow transition-transform ${stockMarket === 'HK' ? 'translate-x-5' : 'translate-x-1'}`} />
                    </Switch>
                    <span className={`font-semibold text-sm ${stockMarket === 'HK' ? 'text-indigo-700' : 'text-gray-500'}`}>Ê∏ØËÇ°</span>
                    <DatePicker
                      selected={selectedDate}
                      onChange={handleDateChange}
                      minDate={minDate}
                      maxDate={maxDate}
                      dateFormat="MM-dd"
                      className="bg-transparent cursor-pointer text-right text-sm w-16"
                      ref={datePickerRef}
                      popperPlacement="bottom-end"
                      customInput={<DatePickerCustomInput />}
                    />
                  </div>
                </div>
                <TableContainer component={Paper} className="rounded-xl shadow-lg bg-white/90 overflow-x-auto">
                  <Table size="small" sx={{ minWidth: { xs: 320, sm: 650 } }}>
                    <TableHead>
                      <TableRow className="bg-indigo-100 text-indigo-800" sx={{ height: { xs: 28, sm: 32 } }}>
                        <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 40, sm: 60 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                          <TableSortLabel active={sortKey === 'ticker'} direction={sortKey === 'ticker' ? sortDirection : 'asc'} onClick={() => handleSort('ticker')}>Ticker</TableSortLabel>
                        </TableCell>
                        <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 80, sm: 120 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                          <TableSortLabel active={sortKey === 'name'} direction={sortKey === 'name' ? sortDirection : 'asc'} onClick={() => handleSort('name')}>Name</TableSortLabel>
                        </TableCell>
                        <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 40, sm: 60 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                          <TableSortLabel active={sortKey === 'changeFromAthPercent'} direction={sortKey === 'changeFromAthPercent' ? sortDirection : 'asc'} onClick={() => handleSort('changeFromAthPercent')}>Change % from ATH</TableSortLabel>
                        </TableCell>
                        <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 60, sm: 85 }, fontSize: { xs: '0.6rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                          <TableSortLabel active={sortKey === 'lastClosingPrice'} direction={sortKey === 'lastClosingPrice' ? sortDirection : 'asc'} onClick={() => handleSort('lastClosingPrice')}>Last Closing Price</TableSortLabel>
                        </TableCell>
                        <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 35, sm: 50 }, fontSize: { xs: '0.6rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                          <TableSortLabel active={sortKey === 'lastChangePercent'} direction={sortKey === 'lastChangePercent' ? sortDirection : 'asc'} onClick={() => handleSort('lastChangePercent')}>Last Change %</TableSortLabel>
                        </TableCell>
                        <TableCell sx={{ m: 0, p: 0, minWidth: { xs: 50, sm: 70 }, fontSize: { xs: '0.65rem', sm: '0.875rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>
                          <TableSortLabel active={sortKey === 'allTimeHigh'} direction={sortKey === 'allTimeHigh' ? sortDirection : 'asc'} onClick={() => handleSort('allTimeHigh')}>All Time High Price</TableSortLabel>
                        </TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {stockLoading ? (
                        <TableRow><TableCell colSpan={6} align="center" className="py-8 text-indigo-400">Âä†ËΩΩ‰∏≠...</TableCell></TableRow>
                      ) : filteredStockData.length === 0 ? (
                        <TableRow><TableCell colSpan={6} align="center" className="py-8 text-gray-400">ÊöÇÊó†Êï∞ÊçÆ„ÄÇ<br />TÊó•Êï∞ÊçÆ‰∫éT+1Êó•8:30Êõ¥Êñ∞„ÄÇ<br />ÈÄâÊã©Âè≥‰∏äËßíÊó•ÂéÜÂèØÊü•ÁúãÂÖ∂‰ªñÊó•ÊúüÊï∞ÊçÆ„ÄÇ</TableCell></TableRow>
                      ) : (
                        pagedStocks.map((stock, i) => (
                          <TableRow key={i} className="hover:bg-indigo-50 transition" sx={{ height: { xs: 20, sm: 32 }, backgroundColor: stock.changeFromAthPercent <= -30 ? 'rgba(255, 0, 0, 0.2)' : stock.changeFromAthPercent <= -20 ? 'rgba(255, 165, 0, 0.2)' : stock.changeFromAthPercent <= -10 ? 'rgba(255, 255, 0, 0.2)' : 'transparent' }}>
                            <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{stock.ticker}</TableCell>
                            <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{stock.name}</TableCell>
                            <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{stock.changeFromAthPercent}</TableCell>
                            <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{stock.lastClosingPrice}</TableCell>
                            <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{stock.lastChangePercent}</TableCell>
                            <TableCell sx={{ fontSize: { xs: '0.6rem', sm: '0.925rem' }, py: 0, px: { xs: 0.5, sm: 1 } }}>{stock.allTimeHigh}</TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                  {filteredStockData.length > 0 && (
                    <div className="relative flex flex-row flex-nowrap items-center w-full py-4 px-2 gap-2">
                      <div className="flex-1 order-2 sm:order-1" />
                      <div className="absolute left-1/2 -translate-x-1/2 flex justify-center items-center gap-2 flex-none mx-auto order-1 sm:order-2">
                        {filteredStockData.length > ITEMS_PER_PAGE && (
                          <Pagination count={stocksTotalPages} page={stocksPage} onChange={(_, value) => setStocksPage(value)} color="primary" shape="rounded" siblingCount={0} boundaryCount={1} size="small" />
                        )}
                      </div>
                      <div className="flex-1 flex justify-end order-3">
                        <span className="text-gray-500 text-xs sm:text-sm md:text-base whitespace-nowrap">ÊòæÁ§∫ {(stocksPage-1)*ITEMS_PER_PAGE+1} Âà∞ {Math.min(stocksPage*ITEMS_PER_PAGE, filteredStockData.length)} ÔºåÂÖ± {filteredStockData.length.toLocaleString()} Êù°</span>
                      </div>
                    </div>
                  )}
                </TableContainer>
              </>
            )}

            {activeTab === 'funds' && (
              <div className="bg-white/80 backdrop-blur rounded-xl shadow-lg p-4 sm:p-6 mb-8 mt-6">
                <h2 className="text-lg sm:text-xl font-semibold text-indigo-700 mb-4">Â∏∏ËßÅÈóÆÈ¢òÔºàQAÔºâ</h2>
              {[
                { question: "‰ªÄ‰πàÊòØQDIIÂü∫ÈáëÔºü", answer: "QDIIÂü∫ÈáëÊòØÊåáÂêàÊ†ºÂ¢ÉÂÜÖÊú∫ÊûÑÊäïËµÑËÄÖÔºàQualified Domestic Institutional InvestorÔºâÈÄöËøáÂ¢ÉÂÜÖÂü∫ÈáëÂÖ¨Âè∏ÂãüÈõÜËµÑÈáëÔºåÊäïËµÑ‰∫éÂ¢ÉÂ§ñÂ∏ÇÂú∫ÁöÑÂü∫Èáë‰∫ßÂìÅ„ÄÇ" },
                { question: "QDIIÂü∫ÈáëÂíåÊôÆÈÄöÂü∫ÈáëÊúâ‰ªÄ‰πàÂå∫Âà´Ôºü", answer: "QDIIÂü∫ÈáëÂíåÊôÆÈÄöÂü∫ÈáëÈÉΩÊòØÊäïËµÑ‰∫éËÇ°Á•®ÁöÑÂü∫ÈáëÔºå‰ΩÜÊòØQDIIÂü∫ÈáëÊòØÂ¢ÉÂ§ñËÇ°Á•®ÊäïËµÑÔºåËÄåÊôÆÈÄöÂü∫ÈáëÊòØÂ¢ÉÂÜÖËÇ°Á•®ÊäïËµÑ„ÄÇ" },
                { question: "QDIIÂü∫ÈáëÊúâÂì™‰∫õÈ£éÈô©Ôºü", answer: "QDIIÂü∫Èáë‰∏ªË¶ÅÊúâÊ±áÁéáÈ£éÈô©„ÄÅÂ∏ÇÂú∫È£éÈô©„ÄÅÊµÅÂä®ÊÄßÈ£éÈô©ÂíåÊîøÁ≠ñÈ£éÈô©Á≠â„ÄÇ" },
                { question: "‰ªÄ‰πàÊòØA/C/D/E/F/IÁ±ªÁ≠â‰ªΩÈ¢ùÔºüÊúâ‰ªÄ‰πàÂå∫Âà´Ôºü", answer: "Âú®Èì∂Ë°åÊ∏†ÈÅìÂíåÁ¨¨‰∏âÊñπÂü∫ÈáëÈîÄÂîÆÂπ≥Âè∞‰∏≠Ôºå‰∏ÄËà¨Âè™Â±ïÁ§∫AÁ±ªÂíåCÁ±ª‰ªΩÈ¢ù„ÄÇ‰ªñ‰ª¨ÁöÑÂå∫Âà´‰∏ªË¶ÅÊòØÁî≥ËµéË¥πÁî®ÁöÑÂå∫Âà´Ôºå‰∏ÄËà¨Âª∫ËÆÆÁî≥Ë¥≠CÁ±ª‰ªΩÈ¢ùÔºåÂâçÁ´ØÊî∂Ë¥πÊõ¥‰Ωé„ÄÇÂÖ∂‰ªñ‰ªΩÈ¢ùÁ±ªÂà´ÔºåÂ¶ÇDÁ±ª„ÄÅEÁ±ª„ÄÅFÁ±ª„ÄÅIÁ±ª‰ªΩÈ¢ùÔºåÂπ∂Ê≤°ÊúâÂÆö‰πâÔºå‰∏ÄËà¨ÊòØËøô‰∏§Âπ¥ÂÖ¥Ëµ∑ÁöÑÂèëËµ∑ÂºèÂü∫Èáë‰ªΩÈ¢ù„ÄÇ" },
                { question: "‰∏∫‰ªÄ‰πàÊúâ‰∫õÂü∫ÈáëÊ≤°ÊúâCÁ±ª‰ªΩÈ¢ùÔºü", answer: "Êúâ‰∫õÂü∫ÈáëÂÖ¨Âè∏ÂèØËÉΩÊ≤°ÊúâÂèëË°åCÁ±ª‰ªΩÈ¢ùÔºåÊàñËÄÖCÁ±ª‰ªΩÈ¢ùÁöÑÁî≥Ë¥≠È¢ùÂ∫¶Â∑≤Áî®ÂÆå„ÄÇ" },
                { question: "Ë°®Ê†ºÈáåÊòæÁ§∫ÊüêÂü∫ÈáëÂÖ¨Âè∏ÁöÑÁ∫≥ÊñØËææÂÖã100ETFÈ¢ùÂ∫¶È´òËææ200‰∏áÔºåÂèØÊòØÂú®Èì∂Ë°åÂíåÁ¨¨‰∏âÊñπÂü∫ÈáëÈîÄÂîÆÂπ≥Âè∞Âç¥Êó†Ê≥ïÊâæÂà∞Ôºü", answer: "Ê†πÊçÆ‰∏äËø∞Ë°®Ê†º(2025Âπ¥9Êúà20Êó•)ÔºåÂèØ‰ª•ÁúãÂà∞ÂçóÊñπÂü∫ÈáëÁ∫≥ÊñØËææÂÖã100ÊåáÊï∞IÁ±ªÊØèÊó•Áî≥Ë¥≠È¢ùÂ∫¶‰∏∫200‰∏áÔºåÂπøÂèëÂü∫ÈáëFÁ±ªÁöÑ‰∏∫100‰∏á„ÄÇËøô‰∏§Á±ª‰ªΩÈ¢ùÂùáÂè™ËÉΩ‰ªéÁõ¥ÈîÄÊ∏†ÈÅì(ÂÆòÊñπAPP/ÂæÆ‰ø°)Ë¥≠‰π∞ÔºåÈì∂Ë°åÂíåÁ¨¨‰∏âÊñπÂü∫ÈáëÈîÄÂîÆÂπ≥Âè∞‰∏çÂ±ïÁ§∫‰πü‰∏çËÉΩË¥≠‰π∞„ÄÇ" },
                { question: "‰∏∫Âï•ÂÅöËøô‰∏™ÁΩëÁ´ôÔºüËøô‰∏™ÂàóË°®ÁöÑÁî®ÈÄîÊòØ‰ªÄ‰πàÔºü", answer: "‰∏ÄËà¨ÂèØ‰ª•ÈÄöËøáÈì∂Ë°åAPP„ÄÅÁ¨¨‰∏âÊñπÂü∫ÈáëÈîÄÂîÆÂπ≥Âè∞ÊàñÂü∫ÈáëÂÖ¨Âè∏Áî≥Ë¥≠Âü∫ÈáëÔºå‰ΩÜÂêÑÊ∏†ÈÅìÂ±ïÁ§∫ÁöÑÊï∞ÊçÆÊúâÈôê„ÄÇ‰æãÂ¶ÇÔºåÊüêÂè™Âü∫ÈáëÊúâAÁ±ªÂíåCÁ±ª‰ªΩÔºåAÁ±ªÊî∂ÂèñÁî≥Ë¥≠Ë¥πÔºåCÁ±ª‰∏çÊî∂Âèñ„ÄÇÂú®Èì∂Ë°åÂíåÁ¨¨‰∏âÊñπÂπ≥Âè∞ÈÄöÂ∏∏Âè™Â±ïÁ§∫AÁ±ªÔºåCÁ±ªÂàô‰∏çÊòæÁ§∫„ÄÇÊú¨ÁΩëÁ´ôËá¥Âäõ‰∫éÊ∂àÈô§‰ø°ÊÅØÂ∑ÆÔºåÊñπ‰æøÊäïËµÑËÄÖÂø´ÈÄüÊâæÂà∞Êª°Ë∂≥Ëá™Â∑±Áî≥Ë¥≠È¢ùÂ∫¶ÁöÑÂü∫Èáë„ÄÇ" },
                { question: "ÊúâÊé®ËçêÁöÑ‰∫§ÊòìÂπ≥Âè∞ÂêóÔºü", answer: "Êú¨ÁΩëÁ´ô‰∏çÊèê‰æõ‰ªª‰Ωï‰∫§ÊòìÂπ≥Âè∞ÔºåÂè™Êèê‰æõÊï∞ÊçÆÂ±ïÁ§∫„ÄÇËá¥Âäõ‰∫é‰∏çÂÅè‰∏çÂÄö„ÄÇ" },
                { question: "Áî≥Ë¥≠È¢ùÂ∫¶ÊòØ‰ªÄ‰πàÔºü", answer: "Áî≥Ë¥≠È¢ùÂ∫¶ÊòØÊåáÂü∫ÈáëÂÖ¨Âè∏ÂÖÅËÆ∏ÊäïËµÑËÄÖË¥≠‰π∞ËØ•Âü∫ÈáëÁöÑÊúÄÂ§ßÈáëÈ¢ù„ÄÇÈ¢ùÂ∫¶Áî®ÂÆåÂêéÔºåÂèØËÉΩÊó†Ê≥ïÁªßÁª≠Áî≥Ë¥≠ËØ•Âü∫Èáë„ÄÇ" },
                { question: "‰∏∫‰ªÄ‰πàÊúâ‰∫õÂü∫ÈáëÈ¢ùÂ∫¶ÊòØ0Ôºü", answer: "È¢ùÂ∫¶‰∏∫0Ë°®Á§∫ËØ•Âü∫ÈáëÂΩìÂâçÊó†Ê≥ïÁî≥Ë¥≠ÔºåÂèØËÉΩÊòØÂõ†‰∏∫È¢ùÂ∫¶Â∑≤Áî®ÂÆåÊàñÂü∫ÈáëÂÖ¨Âè∏ÊöÇÂÅúÁî≥Ë¥≠„ÄÇ" },
                { question: "‰∏∫‰ªÄ‰πàÊ≤°ÊúâÂàóÂá∫Âú∫ÂÜÖETFÔºü", answer: "ÊöÇÊó∂‰∏çÂåÖÂê´Âú∫ÂÜÖETFÔºåÂõ†‰∏∫Âú∫ÂÜÖETFÂú®‰∫åÁ∫ßÂ∏ÇÂú∫‰∫§ÊòìÔºåÊ≤°ÊúâÁî≥Ë¥≠È¢ùÂ∫¶ÈôêÂà∂„ÄÇ" },
                { question: "Â¶Ç‰Ωï‰∏éÂú∫ÂÜÖETFËøõË°åÂ•óÂà©Ôºü", answer: "Âú∫ÂÜÖETFÂ•óÂà©Ê∂âÂèäÂú®‰∫åÁ∫ßÂ∏ÇÂú∫‰π∞ÂçñETF‰ªΩÈ¢ù‰∏éÂú®‰∏ÄÁ∫ßÂ∏ÇÂú∫Áî≥Ë¥≠ËµéÂõûETF‰ªΩÈ¢ù‰πãÈó¥ÁöÑ‰ª∑Â∑Æ‰∫§Êòì„ÄÇÂ•óÂà©ËÄÖÈÄöËøá‰Ωé‰π∞È´òÂçñËé∑ÂèñÂà©Ê∂¶Ôºå‰ΩÜÈúÄËÄÉËôë‰∫§ÊòìË¥πÁî®„ÄÅÁ®éÂä°ÂΩ±ÂìçÂèäÂ∏ÇÂú∫È£éÈô©„ÄÇÂª∫ËÆÆÊúâÁªèÈ™åÁöÑÊäïËµÑËÄÖÂèÇ‰∏éÔºåÂàùÂ≠¶ËÄÖÂ∫îË∞®ÊÖé„ÄÇ" },
                { question: "ÂàóÂá∫ÁöÑÁî≥Ë¥≠È¢ùÂ∫¶‰∏ÄÂÆöÂèØ‰ª•Ë¥≠‰π∞ÂêóÔºü", answer: "‰∏ç‰∏ÄÂÆö„ÄÇÂÆûÈôÖÂèØÁî≥Ë¥≠È¢ùÂ∫¶ÂèØËÉΩÂõ†Ê∏†ÈÅì„ÄÅÊó∂Èó¥Á≠âÂõ†Á¥†ÊúâÊâÄ‰∏çÂêå„ÄÇÂª∫ËÆÆÂú®Áî≥Ë¥≠ÂâçÈÄöËøáÈì∂Ë°åAPPÊàñÁ¨¨‰∏âÊñπÂπ≥Âè∞Á°ÆËÆ§ÂÆûÈôÖÂèØÁî≥Ë¥≠È¢ùÂ∫¶„ÄÇÂè¶Â§ñÔºåÊàë‰ª¨ÂèëÁé∞ÔºåÊüêÂü∫ÈáëÂÖ¨Âè∏Âú®ÂÖ¨Âëä‰∏≠ÂàóÂá∫DÁ±ª‰ªΩÈ¢ùÂèäÂÖ∂Áî≥Ë¥≠È¢ùÂ∫¶Ôºå‰ΩÜÂú®Èì∂Ë°åAPPÂíåÁ¨¨‰∏âÊñπÂπ≥Âè∞Âùá‰∏çÊòæÁ§∫DÁ±ª‰ªΩÈ¢ùÔºåÁªèÂí®ËØ¢ÂÆòÊñπÂÆ¢ÊúçÔºåÁ°ÆËÆ§DÁ±ª‰ªΩÈ¢ùÊó†Ê≥ïÁî≥Ë¥≠ :( Âõ†Ê≠§ÔºåÂª∫ËÆÆÂú®Áî≥Ë¥≠ÂâçÂä°ÂøÖÁ°ÆËÆ§‰ªΩÈ¢ùÁ±ªÂà´ÂíåÈ¢ùÂ∫¶ÁöÑÊúâÊïàÊÄß„ÄÇ" },
                { question: "ÊäïËµÑÁ∫≥ÊñØËææÂÖãÊåáÊï∞ÊàñËÄÖÊ†áÊôÆ500ÊåáÊï∞ÂõûÊä•ÊúâÂ§öÂ∞ëÔºü", answer: "Ê†πÊçÆÂéÜÂè≤Êï∞ÊçÆÔºàÊà™Ëá≥2025Âπ¥9Êúà13Êó•ÔºâÔºåÁ∫≥ÊñØËææÂÖã100ÊåáÊï∞ËøáÂéª10Âπ¥Âπ¥ÂåñÂõûÊä•Á∫¶18.56%Ôºå30Âπ¥Á∫¶13.44%ÔºåÊ≥¢Âä®ÊÄßËæÉÈ´òÔºåÈÄÇÂêàÈ´òÈ£éÈô©ÂÅèÂ•ΩËÄÖ„ÄÇÊ†áÊôÆ500ÊåáÊï∞ËøáÂéª10Âπ¥Âπ¥ÂåñÂõûÊä•Á∫¶9‚Äì13%Ôºå30Âπ¥Á∫¶10.2%ÔºåË°å‰∏öÂàÜÊï£ÔºåËæÉÁ®≥ÂÆö„ÄÇ2024Âπ¥ÔºåÁ∫≥ÊñØËææÂÖã100‰∏äÊ∂®24.88%ÔºåÊ†áÊôÆ500Ê∂®25.02%Ôºõ2025Âπ¥ÂàùËá≥‰ªäÔºåÂàÜÂà´Ê∂®14.66%Âíå12.98%„ÄÇÁõ∏ÊØî‰πã‰∏ãÔºåÈ¶ôÊ∏ØÂàÜÁ∫¢‰øùÈô©IRR(Internal Rate of Return)Á∫¶3‚Äì4%ÔºåÂÜÖÂú∞Á∫¶2%ÔºåÊµÅÂä®ÊÄßÂ∑ÆÔºåÈÄÇÂêà‰ΩéÈ£éÈô©ÈúÄÊ±Ç„ÄÇÊåáÊï∞Âü∫ÈáëÈïøÊúüÂõûÊä•ËøúË∂ÖÂàÜÁ∫¢‰øùÈô©ÔºåÂª∫ËÆÆÊ†πÊçÆÈ£éÈô©ÂÅèÂ•ΩÈÄâÊã©ÔºöÊøÄËøõÂûãÈÄâÁ∫≥ÊñØËææÂÖã100ÔºåÁ®≥ÂÅ•ÂûãÈÄâÊ†áÊôÆ500ÔºåÊàñÊ∑∑ÂêàÈÖçÁΩÆ„ÄÇËã•ÈÅá‰øùÈô©Êé®ÈîÄÔºåÊó†ÈúÄÁÑ¶Ëôë :) Anyway, they serve different needs:)" },
                { question: "Ëøô‰∫õÊï∞ÊçÆÊù•Ëá™Âì™ÈáåÔºüÂèØÈù†ÂêóÔºü", answer: "Êï∞ÊçÆÂùáÊù•Ëá™Âü∫ÈáëÂÖ¨Âè∏ÂèëÂ∏ÉÁöÑÂÆòÊñπÂÖ¨Âëä„ÄÇÂ∞ΩÁÆ°Â¶ÇÊ≠§ÔºåÊàë‰ª¨ÂèëÁé∞ÈÉ®ÂàÜÂÖ¨ÂëäÂÅ∂ÊúâÊï∞ÊçÆÈîôËØØÔºåÂèØËÉΩÂØºËá¥ÂàóË°®‰∏≠‰∏™Âà´Êï∞ÊçÆ‰∏çÂáÜÁ°Æ„ÄÇÊàë‰ª¨ÂäõÊ±ÇÊï∞ÊçÆÂáÜÁ°ÆÔºåËã•ÂèëÁé∞ÈîôËØØÔºåÊ¨¢ËøéÈÄöËøá‰∏ãÊñπË°®Ê†ºÊàñ‰∫§ÊµÅÁæ§ÂèçÈ¶à„ÄÇ" },
                { question: "Ëøô‰∫õÊï∞ÊçÆÂ§ö‰πÖÊõ¥Êñ∞‰∏ÄÊ¨°Ôºü", answer: "QDIIÂü∫ÈáëÁî≥Ë¥≠È¢ùÂ∫¶ÊØèÂ§©3:00(Âåó‰∫¨Êó∂Èó¥Ôºå‰∏ãÂêå)Âíå18:00Êõ¥Êñ∞ÔºåMEGA 7+ËÇ°Á•®Êï∞ÊçÆÊØèÂ§©8:30Êõ¥Êñ∞„ÄÇ" },
                { question: "MEGA 7+ÊòØÁî®Êù•Âπ≤‰ªÄ‰πàÁöÑÔºü", answer: "Êñπ‰æøÊØèÊó•ËßÇÂØüÁæéËÇ°/Ê∏ØËÇ°Ê†∏ÂøÉÁßëÊäÄÈæôÂ§¥ÁöÑË°®Áé∞ÔºåÊï∞ÊçÆ‰∏éQDIIÈ¢ùÂ∫¶Êï¥ÂêàÔºå‰æø‰∫éÊäïËµÑÂÜ≥Á≠ñ„ÄÇ" },
                { question: "MEGA 7+ÂåÖÂê´Âì™‰∫õËÇ°Á•®Ôºü", answer: "MEGA 7ÊåáÁ∫≥ÊñØËææÂÖã100ÊåáÊï∞‰∏≠ÁöÑ7Âè™Ê†∏ÂøÉÁßëÊäÄÈæôÂ§¥ÔºàËãπÊûú„ÄÅÂæÆËΩØ„ÄÅ‰∫öÈ©¨ÈÄä„ÄÅË∞∑Ê≠å„ÄÅMeta„ÄÅËã±‰ºüËææ„ÄÅÁâπÊñØÊãâÔºâ„ÄÇÊú¨Ë°®‰∏≠ÂåÖÂê´‰∫ÜÈÉ®ÂàÜÊù†ÊùÜETFÂèäÊ∏ØËÇ°Ê†∏ÂøÉÁßëÊäÄÈæôÂ§¥ÔºàËÖæËÆØ„ÄÅÈòøÈáåÂ∑¥Â∑¥Á≠âÔºâÔºåÊïÖÁß∞‰∏∫MEGA 7+„ÄÇ" },
                { question: "MEGA 7+‰∏∫Âï•Ê≤°Êúâ9Êúà11Êó•‰ª•ÂâçÁöÑÊï∞ÊçÆÔºü", answer: "9Êúà11Êó•‰ª•ÂâçÁöÑÊï∞ÊçÆÊú™Â≠òÂÖ•Êï∞ÊçÆÂ∫ìÔºå‰ªÖ‰øùÂ≠òÂú®‰∏™‰∫∫ÈÇÆÁÆ±„ÄÇ‰ªé9Êúà12Êó•Ëµ∑ÔºåÊØèÂ§©Êï∞ÊçÆ‰ºöËá™Âä®‰øùÂ≠òÂπ∂ÂèØÊåâÊó•ÊúüÊü•ËØ¢„ÄÇ" },
                { question: "MEGA 7+ÁöÑÊï∞ÊçÆÊù•Ê∫êÔºü", answer: "Êï∞ÊçÆÊù•Ê∫ê‰∫éÂºÄÊ∫êÂ∫ì AKSHARE„ÄÇ" },
                { question: "ÂèØ‰ª•ÂÆâË£ÖAPPÂà∞ÊâãÊú∫/ÁîµËÑëÂêóÔºü", answer: "ÂèØ‰ª•„ÄÇÂú®ÊâãÊú∫ÊµèËßàÂô®‰∏≠ÊâìÂºÄÊú¨ÁΩëÁ´ôÔºåÈÄâÊã©‚ÄúÂàÜ‰∫´‚Äù -> ‚ÄúÊ∑ªÂä†Âà∞‰∏ªÂ±èÂπï‚ÄùÂç≥ÂèØ„ÄÇÂú®ÁîµËÑëÊµèËßàÂô®‰∏≠ÊâìÂºÄÊú¨ÁΩëÁ´ôÔºåÁÇπÂáªÂú∞ÂùÄÊ†èÂè≥‰æßÁöÑÂÆâË£ÖÂõæÊ†áÔºà+Âè∑ÔºâÔºåÊàñÈÄöËøáÊµèËßàÂô®ËèúÂçïÈÄâÊã©‚ÄúÂÆâË£ÖÂ∫îÁî®‚Äù„ÄÇ" },
              ].map((faq, i) => (
                <Accordion key={i}>
                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                    <Typography variant="h6" fontWeight="bold">{faq.question}</Typography>
                  </AccordionSummary>
                  <AccordionDetails>
                    <Typography variant="body1" color="textSecondary">{faq.answer}</Typography>
                  </AccordionDetails>
                </Accordion>
              ))}
              </div>
            )}
          </div>
        </div>
      )}

      <Analytics />
    </>
  )
}